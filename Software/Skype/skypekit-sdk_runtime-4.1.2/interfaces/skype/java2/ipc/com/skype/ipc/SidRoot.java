package com.skype.ipc;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.ref.SoftReference;
import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.concurrent.locks.ReentrantLock;

/***
 * Base class for a SID interface. Most of function are internal even when public. The functions to be used in the application are documented ones.
 */
public abstract class SidRoot implements ClientEncodingListener, ClientDecodingListener, ObjectFactoring {

    protected SidRoot() {
        mSidTimestamp = 0;
    }

    protected class EventThread extends Thread {
        public EventThread(SidRoot root) {
            super();
            mRoot = root;
        }

        public void run() {
            mRoot.sidPollEvent();
        }

        private SidRoot mRoot;
    }

    protected void sidPollEvent() {
        try {
            while (!mSidStopped) {
                Decoding decoder = mSidDecoder.decodeEvent(this);
                switch (decoder.getCommand()) {
                case 'C': 
                    sidOnChangedProperty(decoder);
                    break;
                case 'E':
                    int mid  = decoder.decodeUint();
                    int evid = decoder.decodeUint();
                    sidDispatchEvent(mid, evid, decoder);
                    break;
                case 'g':
                    sidAddPendingGetResponse();
                    break;
                case 'r':
                    sidAddPendingResponse(decoder.decodeUint());
                    break;
                }
            }
        } catch (IOException e) {
            sidOnFatalError(e);
        }
    }

    public abstract void sidDispatchEvent(int modId, int evId, Decoding decoder);

    public boolean sidWantRead() {
        synchronized (this) {
            if (mSidReader == mSidEventThread || mSidReader == null) {
                 mSidReader = mSidEventThread;
                 return true;
            } else {
                mSidReadyEventThread = mSidEventThread;
            }
        }
        synchronized (mSidEventThread) {
            try {
                while (mSidCurrentReader != mSidEventThread)
                    mSidEventThread.wait();
            } catch (InterruptedException ie) {
                return false;
            }
            mSidCurrentReader = null;
        }
        return true;
    }

    /***
     * initialize the connection to the runtime, and the interface cache accordingly to the configuration
     * @param configuration defining the connection parameters to the runtime
     * @param listener callbacks to check the status of the connection
     * return success or failure to connect
     */
    public boolean init(ClientConfiguration configuration, ConnectionListener listener) {
        registerConnectionListener(listener);

        TransportFactory factory = configuration.getTransportFactory();
        TransportFactory.Result transport = factory.init(configuration, listener);
        if (transport != null) {
            mSidInput           = transport.in;
            mSidOutput          = transport.out;
            mSidDispatchAll     = configuration.isDispatchAll();
            mSidDecoder         = new BinProtocolClientDecoder(transport.in, this, this);
            mSidEncoder         = new BinProtocolClientEncoder(transport.out, this);
            flushCache(null);
            mSidEncoderLock     = new ReentrantLock();
            mSidEncoding        = false;
            mSidPendingRequests = new HashMap<Integer, Thread>(2);
            mSidPendingOneWayRequests = new HashSet<Integer>(2);
            mSidPendingGets     = new ArrayDeque<Thread>(2);
            mSidEventThread     = new EventThread(this);
            mSidReader          = mSidEventThread;
            mSidCurrentReader   = null;
            mSidEventThread.start();
        }
        return mSidObjects != null;
    }

    protected SidObject sidDecodeEventTarget(int mid, Decoding decoder)
    {
        SidObject target = null;
        try {
            int b = decoder.decodeTag(); // shall be 'O'
            int zero = decoder.decodeUint();
            int oid = decoder.decodeUint();
            target = mSidDispatchAll ? sidGetObject(mid, oid) : sidGetObjectIfPresent(mid, oid);
            if (target == null) {
                decoder.skipEndOfMessage();
            }
        }
        catch (IOException e) {
            sidOnFatalError(e);
        }
        return target;
    }

    /***
     * start the session after init, once all the runtime setups have been done
     */
    public abstract boolean start();

    /***
     * stop and terminate the connection to a runtime
     */
    public synchronized void stop() {
        mSidStopped = true;
        if (mSidEncoding) {
            mSidEncoding = false;
            mSidEncoderLock.unlock();
        }
        try {
            mSidInput.close();
            mSidOutput.close();
        } catch (IOException e) {
        }
        if (mSidCurrentReader != null)
            mSidCurrentReader.interrupt(); 
        if (mSidReader != null && mSidReader != mSidCurrentReader)
            mSidReader.interrupt(); 
        for (Thread thread : mSidPendingRequests.values()) {
            thread.interrupt();
        }
        for (Thread thread : mSidPendingGets) {
            thread.interrupt();
        }
    }

    public void sidOnFatalError(IOException e) {
        if (mSidStopped) return;
        stop();
        if (mSidConnectionListener != null) {
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            mSidConnectionListener.sidOnDisconnected(sw.toString());
        } else {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    //
    // Object Cache Management
    //

    public SidObject sidGetObjectIfPresent(int mid, int oid) {
        Integer key = oid; //new Integer(oid);
        SidObject o = null;
        synchronized (mSidObjects) {
            SoftReference<SidObject> r = mSidObjects.get(key); 
            if (r != null) {
                o = r.get();
                if (o == null) {
                    o = sidCreateObject(mid, oid);
                    mSidObjects.put(key, new SoftReference<SidObject>(o));
                }
            }
        }
        return o;
    }

    public SidObject sidGetObject(int mid, int oid) {
        Integer key = oid; //new Integer(oid);
        SidObject o = null;
        synchronized (mSidObjects) {
            SoftReference<SidObject> r = mSidObjects.get(key); 
            if (r != null) {
                o = r.get();
            }
            if (o == null) { 
                o = sidCreateObject(mid, oid);
                mSidObjects.put(key, new SoftReference<SidObject>(o));
            }
        }
        return o;
    }
    protected abstract SidObject sidCreateObject(int mid, int oid);

    protected void sidRemove(Integer oid) {
        synchronized (mSidObjects) {
            mSidObjects.remove(oid);
        }
    }

    protected Encoding sidBeginMultiGet(PropertyEnumConverting[] properties, int modid, int oid) throws IOException {
        mSidEncoderLock.lock();
        mSidEncoding = true;
        return mSidEncoder.beginMultiGet(properties, modid, oid, this);
    }
    
    protected Decoding sidDoGetRequest(byte[] request, int oid) throws IOException { // case of multi request?
        mSidEncoderLock.lock();
        mSidEncoding = true;
        return mSidEncoder.doGetRequest(request, oid, this);
    }

    public Decoding sidOnGetRequestEncoded() throws IOException {
        Thread current = null;
        synchronized (this) {
            if (mSidPendingGetResponse != null) { // response is already here...
                mSidPendingGetResponse = null;
            } else {
                current = Thread.currentThread();
                mSidPendingGets.add(current);
                if (mSidReader == null) mSidReader = current;
            }
        }
        mSidEncoding = false;
        mSidEncoderLock.unlock();
        if (current != null) {
            if (mSidReader != current) {
                synchronized (current) {
                    try {
                        while (mSidCurrentReader != current)
                            current.wait();
                    } catch (InterruptedException ie) {
                        mSidReader = null;
                    }
                    mSidCurrentReader = null;
                }
            }
            if (mSidReader == current) {
                // current thread became the new reader and shall wait for a response
                sidWaitResponse();
            }
        }
        // response is here and needs being decoded
        return mSidDecoder;
    }

    public void sidOnGetResponseDecoded() {
         sidOnResponseDecoded();
    }
    
    protected Encoding sidDoRequest(byte[] request) throws IOException {
        mSidEncoderLock.lock();
        mSidEncoding = true;
        return mSidEncoder.beginRequest(request, this);
    }

    protected Encoding sidDoRequest(byte[] request, int oid) throws IOException {
        mSidEncoderLock.lock();
        mSidEncoding = true;
        return mSidEncoder.beginRequest(request, oid, this);
    }
    
    public Decoding sidOnRequestEncoded(int requestId) throws IOException {
        mSidEncoding = false;
        mSidEncoderLock.unlock();
        Thread current = Thread.currentThread();
        Integer rid    = requestId;
        synchronized (this) {
            Thread responder = mSidPendingRequests.get(rid);
            if (responder != null) { // response already here
                mSidPendingRequests.remove(rid);
                return mSidDecoder;
            }
            mSidPendingRequests.put(rid, current);
            if (mSidReader == null) mSidReader = current;
        }
        if (mSidReader != current) {
            synchronized (current) {
                try {
                    while (mSidCurrentReader != current)
                        current.wait();
                } catch (InterruptedException ie) {
                    mSidReader = null;
                }
                mSidCurrentReader = null;
                // 2 cases => either there was no reader and we were promoted reader
                //            then mSidReader == current, and we must wait responses
                //         => or the reader got our response, we must decode it
            }
        }
        if (mSidReader == current) { // we were wakenup to read
            sidWaitResponse();
        }
        return mSidDecoder;
    }

    public Decoding sidOnOneWayRequestEncoded(int requestId) {
        mSidEncoding = false;
        mSidEncoderLock.unlock();
        Thread responder = null;
        Integer rid      = requestId;
        Thread current   = Thread.currentThread();
        
        synchronized (this) {
            responder = mSidPendingRequests.get(rid);
            if (responder != null) { // response is already here and was partly swallowed
                mSidPendingRequests.remove(rid);
            } else { 
                mSidPendingRequests.put(rid, current);
                mSidPendingOneWayRequests.add(rid);
            }
        }
        if (responder != null) {
            try {
                mSidDecoder.skipMessage();
            } catch (IOException e) {
                sidOnFatalError(e);
            }
            synchronized (responder) {
                mSidCurrentReader = responder;
                responder.notify();                
            }
        }
        return null;
    }

    public void sidOnResponseDecoded() {
        Thread current = Thread.currentThread();
        if (mSidReader == current) {
            synchronized (this) {
                if (!mSidPendingGets.isEmpty()) {
                    mSidReader = mSidPendingGets.peek(); 
                } else {
                    mSidReader = null;
                    if (!mSidPendingRequests.isEmpty()) {
                        // can be oneway...
                        for (Entry<Integer, Thread> entry : mSidPendingRequests.entrySet()) {
                            Integer rid = entry.getKey();
                            if (!mSidPendingOneWayRequests.contains(rid)) {
                                mSidReader = entry.getValue();
                                break;
                            }
                        }
                    }
                    if (mSidReader == null && mSidReadyEventThread != null) {
                        mSidReader = mSidReadyEventThread; 
                    }
                }
                current = mSidReader; 
            }
        } else {
            current = mSidReader;
        }
        if (current != null) {
            synchronized (current) {
                mSidCurrentReader = current;
                current.notify();
            }
        }
    }

    void sidOnChangedProperty(Decoding decoder) {
        // currently only 1 notified at once and only int-alike properties are valued, else design shall be changed to ensure that all properties are decoded
        // before calling the callbacks
        int expected = 1;
        int kind;
        int oid       = 0;
        int moduleId  = 0;
        int value     = 0;
        String svalue = null;
        int propertyId= -1;
        try {
            while (decoder.hasNextProperty(false)) {
                assert(expected-- > 0);
                PropertyInfo info = decoder.getNextProperty();
                kind       = info.kind; 
                moduleId   = info.moduleId;
                oid        = info.objectId;
                propertyId = info.propertyId;
                switch (kind) {
                case 'F': case 'N': break;
                case 'T': value = 1; break;
                case 'O': case 'e': case 'u': value = decoder.decodeUint(); break;
                case 'i': value = decoder.decodeInt(); break;
                case 'S': case 'f': case 'X': svalue =  decoder.decodeString(); break;
                default:
                    decoder.skipValue(kind);
                    break;
                }
            }
        } catch (IOException e) {
            sidOnFatalError(e);
        }
        if (oid>0) {
            SidObject o = mSidDispatchAll ? sidGetObject(moduleId, oid) : sidGetObjectIfPresent(moduleId, oid);
            if (o != null) {
                o.sidOnChangedProperty(propertyId, value, svalue);
            }
        }
    }

    boolean sidAddPendingGetResponse()  throws IOException {
        Thread current   = mSidReader;
        Thread requester = null;
        synchronized (this) {
            if (mSidPendingGets.isEmpty()) {
                mSidPendingGetResponse = current;
            } else {
                requester =  mSidPendingGets.poll();
            }
        }
        boolean got_my_response = requester == current;
        if (!got_my_response) {
            if (requester != null) {
                synchronized (requester) {
                    mSidCurrentReader = requester;
                    requester.notify();
                }
            }
            synchronized (current) {
                try {
                    while (mSidCurrentReader != current)
                        current.wait();
                } catch (InterruptedException ie) {
                    throw new IOException("Connection was closed");
                }
                mSidCurrentReader = null;
            }
        }
        return got_my_response;
    }

    boolean sidAddPendingResponse(int requestId)  throws IOException {
        Thread current   = mSidReader;
        Thread requester = null;
        Integer rid      = requestId;
        boolean oneway   = false;
        synchronized (this) {
            requester = mSidPendingRequests.get(rid);
            if (requester == null) {
                mSidPendingRequests.put(rid, current);
            } else {
                mSidPendingRequests.remove(rid);
                oneway = mSidPendingOneWayRequests.remove(rid);
            }
        }
        if (oneway) {
            try {
                mSidDecoder.skipMessage();
            } catch (IOException e) {
                sidOnFatalError(e);
            }
            return false;
        }
        boolean got_my_response = requester == current;
        if (!got_my_response) {
            if (requester != null) {
                synchronized (requester) {
                    mSidCurrentReader = requester;
                    requester.notify();
                }
            } 
            synchronized (current) {
                try {
                    while (mSidCurrentReader != current)
                        current.wait();
                } catch (InterruptedException ie) {
                    throw new IOException("Connection was closed");
                }
                mSidCurrentReader = null;
            }
        }
        return got_my_response;
    }
    
    void sidWaitResponse() throws IOException {
        Decoding decoder = mSidDecoder;
        while (true) {
            int r;
            try {
                r = decoder.decodeResponse(this);
            } catch (IOException e) {
                 return;
            }
            switch (r) {
            case 'r':
                int rid;
                try {
                    rid = decoder.decodeUint();
                } catch (IOException e) {
                    return;
                }
                if (sidAddPendingResponse(rid)) return;
                break;
            case 'g':
                if (sidAddPendingGetResponse()) return;
                break;
            }
        }
    }

    public void registerConnectionListener(ConnectionListener listener) {
        mSidConnectionListener = listener;
    }
    public void unRegisterConnectionListener(ConnectionListener listener) {
        mSidConnectionListener = null;
    }
    public ConnectionListener getConnectionListener() {
        return mSidConnectionListener;
    }

    public SidObject flushCache(SidObject keep) {
        mSidTimestamp++;
        mSidObjects = new HashMap<Integer, SoftReference<SidObject>>(512);
        if (keep != null) {
            mSidObjects.put(keep.getOid(), new SoftReference<SidObject>(keep));
            keep.mSidTimestamp = mSidTimestamp;
        }
        return keep;
    }    

    protected int                                      mSidTimestamp;
    private ConnectionListener                         mSidConnectionListener;
    private Thread                                     mSidReader;
    private Thread                                     mSidCurrentReader;
    private Thread                                     mSidEventThread;
    private Thread                                     mSidReadyEventThread;
    private ReentrantLock                              mSidEncoderLock;
    private boolean                                    mSidEncoding;
    protected BinProtocolClientEncoder                 mSidEncoder;
    protected BinProtocolClientDecoder                 mSidDecoder;
    private HashMap<Integer, Thread>                   mSidPendingRequests;
    private HashSet<Integer>                           mSidPendingOneWayRequests;
    private ArrayDeque<Thread>                         mSidPendingGets;
    private Thread                                     mSidPendingGetResponse;
    private boolean                                    mSidDispatchAll;
    private boolean                                    mSidStopped;
    private HashMap<Integer, SoftReference<SidObject>> mSidObjects;
    private InputTransporting                          mSidInput;
    private OutputTransporting                         mSidOutput;
}

