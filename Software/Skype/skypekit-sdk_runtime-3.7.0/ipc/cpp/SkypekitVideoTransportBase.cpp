
#ifdef SKYPEKIT_SURFACE_RENDERING

#include "SkypekitVideoTransportBase.hpp"

#ifndef _WIN32
#include <sys/shm.h>
#include <sys/sem.h>
#else
#include <windows.h>
#endif

#include <string.h>
#include <stdio.h>
#include <errno.h>

bool SkypekitVideoTransportBase::DetachSharedMemory()
{
#ifdef _WIN32
	UnmapViewOfFile( shm_data );
	CloseHandle( hMapFile );
#else
	if ( shmdt( shm_data ) == -1 )
		return false;
#endif
	shm_data = NULL;
	return true;
}

#ifdef _WIN32
HANDLE SkypekitVideoTransportBase::CreateNewMapping( int ssize, int *id )
{
	HANDLE resp = NULL;
	char keyname[80];
	*id = 0;
	while( !resp ) {
		(*id)++;
		_snprintf( keyname, 80, "skypekit-surface-%i", *id );
		resp = CreateFileMapping( INVALID_HANDLE_VALUE, 0, PAGE_READWRITE, 0, ssize, keyname );
		if ( resp == NULL ) {
			// printf( "Failed to create mapping: %d\n", GetLastError() );
			*id = 0;
			return NULL;
		}
		if ( GetLastError() == ERROR_ALREADY_EXISTS ) {
			CloseHandle( resp );
			resp = NULL;
		}
	}
	return resp;
}

bool SkypekitVideoTransportBase::CreateNewSemaphoreSet( int *id )
{
	HANDLE resp = NULL;
	for( int i=0;i<3;i++ )
		semaphores[i] = NULL;
	char keyname[80];
	int cid = 1;
	*id = cid;
	int count = 0;
	while( count < 3 ) {
		_snprintf( keyname, 80, "skypekit-surfacesem-%i", cid );
		LONG initcount = ( count==SemSendCommand ? 1 : 0 );
		LONG maxcount = ( count==SemAvailableBuffers ? 10 : 1 );
		semaphores[count]=CreateSemaphore(0, initcount, maxcount, keyname);
		if ( semaphores[count] == NULL ) {
			//printf( "Failed to create semaphore: %d\n", GetLastError() );
			for( int i=0;i<count;i++ ) {
				CloseHandle( semaphores[i] );
				semaphores[i] = NULL;
			}
			*id = 0;
			return false;
		}
		cid++;
		if ( GetLastError() == ERROR_ALREADY_EXISTS ) {
			for( int i=0;i<count;i++ ) {
				CloseHandle( semaphores[i] );
				semaphores[i] = NULL;
			}
			count = 0;
			*id = cid;
		} else
			count++;
	}
	return true;
}

bool SkypekitVideoTransportBase::OpenSemaphoreSet( int id )
{
	char keyname[80];
	for( int i=0;i<3;i++ ) {
		_snprintf( keyname, 80, "skypekit-surfacesem-%i", id+i );
		semaphores[i] = OpenSemaphore( SEMAPHORE_ALL_ACCESS, FALSE, keyname );
	}
	return true;
}
#endif

#ifdef _WIN32
bool SkypekitVideoTransportBase::AttachSharedMemory( HANDLE key )
#else
bool SkypekitVideoTransportBase::AttachSharedMemory( int key )
#endif
{
#ifdef _WIN32
	shm_data = (unsigned char *)MapViewOfFile( key, FILE_MAP_ALL_ACCESS, 0, 0, 0 );
	if ( !shm_data ) {
		//printf( "Could not map view of file: %d", GetLastError() );
		return false;
	}
#else
	comm_id = key;
	shm_data = (unsigned char *)shmat( comm_id, 0, 0 );
	if ( shm_data == (unsigned char *)-1 ) {
		fprintf( stderr, "Failed to attach shared memory\n" );
		return false;
	}
	/* TODO: Error handling */
	/* TODO: Test that shared memory has enough size */
#endif

	unsigned char *tmp = shm_data;
	command_data = (commandstruct *)tmp;
	tmp += sizeof( commandstruct );
	buffer_data = (bufferstruct *)tmp;
	tmp += sizeof( bufferstruct )*VID_BUFFERS;
	sem_id = (int *)tmp;
	tmp += sizeof( int );
	pref_data = tmp;

	return true;
}

int SkypekitVideoTransportBase::getKey()
{
	return comm_id;
}

#endif
