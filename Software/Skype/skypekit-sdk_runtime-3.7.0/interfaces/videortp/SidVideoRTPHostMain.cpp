#include <stdio.h>
#include "sidg_videortpif_server.hpp"
#include "SidVideoRTPInterface.hpp"
#include "SidProtocolEnums.hpp"
#include "sidg_videortpif_cb_client.hpp"
#include "SidDebugging.hpp"

struct OptionsParser {
	OptionsParser() :
		m_IpcPrefix("/tmp/"),
		m_Help(false) {
	}
	void Usage(const char *executable) {
		SID_INFO("usage:");
		SID_INFO("	%s [options]", executable);
		SID_INFO("	options:");
		SID_INFO("		-h - print help");
		SID_INFO("		-s prefix - path prefix for ipc key. default /tmp/");
	}
	int ParseOptions(int argc, const char **argv) {
		for (int i = 1; i < argc; i++) {
			const char c = argv[i][0];
			if (c == '-' || c == '/') {
				switch (argv[i][1]) {
				case 'h': {
					m_Help = true;
					break;
				}
				case 's': {
					if (i + 1 >= argc)
						return -1;
					m_IpcPrefix = argv[++i];
					break;
				}
				default: {
					return -1;
					break;
				}
				}
			} else {
				return -1;
			}
		}

		return 0;
	}
	const char *m_IpcPrefix;
	bool m_Help;
};


void VideohostRun(const char *ipcprefix) {
	SID_INFO("VideohostRun enter");
	Sid::SkypeVideoRTPInterfaceServer *videortpif_server = new Sid::SkypeVideoRTPInterfaceServer();
	Sid::SkypeVideoRTPInterfaceCbClient *videortpif_cb_client = new Sid::SkypeVideoRTPInterfaceCbClient();

	SkypeVideoRTPInterface* vidrtpif = SkypeVideoRTPInterfaceGet(videortpif_cb_client);
	videortpif_server->set_if(vidrtpif);

	char fromskypekitkey[512];
	char toskypekitkey[512];

	snprintf(fromskypekitkey, sizeof(fromskypekitkey), "%svidrtp_from_skypekit_key", ipcprefix);
	snprintf(toskypekitkey, sizeof(toskypekitkey), "%svidrtp_to_skypekit_key", ipcprefix);

	videortpif_server->Connect(fromskypekitkey, 0);
	videortpif_cb_client->Connect(toskypekitkey, 500);

	Sid::Protocol::Status status;
	do {
		status =videortpif_server->ProcessCommands();
	} while (status == Sid::Protocol::OK);

	SkypeVideoRTPInterfaceRelease(vidrtpif);
	videortpif_server->Disconnect();
	videortpif_cb_client->Disconnect();

	delete videortpif_server;
	delete videortpif_cb_client;
	SID_INFO("VideohostRun exit");
}

#ifndef DONT_DEFINE_VIDEOHOST_MAIN
int main(int argc, const char **argv) {
	OptionsParser parser;
	if (parser.ParseOptions(argc, argv) < 0 || parser.m_Help) {
		parser.Usage(argv[0]);
		return -1;
	}

	VideohostRun(parser.m_IpcPrefix);
}
#endif
