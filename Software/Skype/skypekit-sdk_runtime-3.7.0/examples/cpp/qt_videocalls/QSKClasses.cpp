
#include <mainwindow.h>
#include "QSKClasses.h"
#include "videowidget.h"

MainWindow*             mainForm;
VideoWidget*            previewVideoWindow;
QSKSignalDispatcher*    dispatcher;
QSKSkype*               skype;

//------------------------------------------------------------------------------------------------
// Signaler methods

void QSKSignalDispatcher::ConnectToUI()
{
    // Connecting signals from SkypeKit side (dispatcher) to GUI side (mainForm)
    QObject::connect (this, SIGNAL(SendToLogSignal(QString)),           mainForm, SLOT(on_LogMessage(QString)));
    QObject::connect (this, SIGNAL(UpdateContactListSignal()),          mainForm, SLOT(on_UpdateContactList()));
    QObject::connect (this, SIGNAL(EnableCallBtnSignal(bool)),          mainForm, SLOT(on_EnableCallBtn(bool)));
    QObject::connect (this, SIGNAL(EnableLoginBtnSignal(bool)),         mainForm, SLOT(on_EnableLoginBtn(bool)));
    QObject::connect (this, SIGNAL(ToggleVideoWindowSignal(bool)),      mainForm, SLOT(on_ToggleVideoWindow(bool)));
    QObject::connect (this, SIGNAL(ToggleCallBtnSignal(bool)),          mainForm, SLOT(on_CallButtonDropsCall(bool)));

    // Connecting signals from GUI side to SkypeKit side (dispatcher)
    QObject::connect (mainForm, SIGNAL(PlaceCallSignal(QString)),                   this, SLOT(on_PlaceCall(QString)));
};


void QSKSignalDispatcher::on_PlaceCall(QString target)
{
    Q_ASSERT(skype);
    skype->PlaceCall(target);
};


//------------------------------------------------------------------------------------------------
// Account methods

void QSKAccount::OnChange(int prop)
{
    if (prop == Account::P_STATUS)
    {
        Account::STATUS AccountStatus;
        this->GetPropStatus(AccountStatus);

        SEStringList S;
        S = this->getPropDebug(prop, (uint)AccountStatus);

        QString QS = "";

        QS.append(S[0] + " ");
        QS.append(S[1] + " ");
        QS.append(S[2]);

        dispatcher->log(QS);

        if (AccountStatus == Account::LOGGED_IN)
        {
            dispatcher->log("Login complete.");
            skype->isLoggedIn = true;
            dispatcher->SendEnableLoginBtnSignal(false);
            dispatcher->SendEnableCallBtnSignal(true);
            dispatcher->SendUpdateContactListSignal();
        }
        else if (AccountStatus == Account::LOGGED_OUT)
        {
            skype->isLoggedIn = false;
            dispatcher->log("Logout complete.");
            dispatcher->SendEnableLoginBtnSignal(true);
            dispatcher->SendEnableCallBtnSignal(false);

            SEString whyDidWeLogoutStr;
            Account::LOGOUTREASON whyDidWeLogout;
            this->GetPropLogoutreason(whyDidWeLogout);
            SEStringList Dbg;
            Dbg = this->getPropDebug(Account::P_LOGOUTREASON, whyDidWeLogout);

            dispatcher->log((const char*)Dbg[2]);
        };
    };
};

//------------------------------------------------------------------------------------------------
// ContactGroup methods

void QSKContactGroup::OnChange(const ContactRef& contact)
{
    dispatcher->SendUpdateContactListSignal();
};


//---------------------------------------------------------------------------------------
// QSKVideo class methods

void QSKVideo::OnChange(int prop)

{
    // Note that we only care about status of remoteVideo object here.
    // Remote video can start at unpredictable times - depending on how
    // it gets switched on or off remotely, so we need to monitor this
    // over Video::P_STATUS updates.

    if ( (prop == Video::P_STATUS) && (this->ref() == skype->remoteVideo) )
    {
        Video::STATUS Status;
        this->GetPropStatus(Status);

        SEStringList Dbg;
        SEString remoteStatus;
        Dbg = this->getPropDebug(Video::P_STATUS, Status);
        remoteStatus.Format("Remote video status: %s", (const char*)Dbg[2]);
        dispatcher->log((const char*)remoteStatus);

        if ( (Status == Video::AVAILABLE) && (skype->isLiveSessionUp) )
        {
            dispatcher->log("Opening video window (video.onchange).");
            dispatcher->SendToggleVideoWindowSignal(true);
        };

        if (Status == Video::STOPPING)
        {
            dispatcher->log("Closing video window.");
            dispatcher->SendToggleVideoWindowSignal(false);
        };
    };
};


//---------------------------------------------------------------------------------------
// Participant class methods

void QSKParticipant::OnChange(int prop)

{
    if (prop == Participant::P_VIDEO_STATUS)
    {
        Participant::VIDEO_STATUS VidStatus;
        this->GetPropVideoStatus(VidStatus);

        SEString localAccountName;
        skype->account->GetPropSkypename(localAccountName);
        SEString ParticipantId;
        this->GetPropIdentity(ParticipantId);

        // Following code produces Participant video_status updates in debug log.
        {
            QString S = "";
            SEStringList DebugStrings;
            DebugStrings = this->getPropDebug(prop, (uint)VidStatus);
            if (localAccountName == ParticipantId)
            { S = "LOCAL "; } else {S = "REMOTE "; };
            S.append(DebugStrings[0] + " ");    // Class name
            S.append(DebugStrings[1] + " ");    // Property name
            S.append(DebugStrings[2]);          // Value as string
            dispatcher->log(S);
        };

        if (VidStatus == Participant::VIDEO_AVAILABLE)
        {
            // When localVideo becomes available - we just start it right away.
            // If you want to switch video send ON manually, this would be the place
            // from where to send appropriate signal to your UI to enable videoSend button.
            if (localAccountName == ParticipantId)
            {
                dispatcher->log("Retrieving local video object.");
                if (this->GetVideo(skype->localVideo))
                {
                    dispatcher->log("Starting video send.");
                    skype->localVideo->Start();
                }
                else
                {
                    dispatcher->log("ERROR: Failed to retrieve local video object!");
                };
            }
            else
            // With remoteVideo we need to check for availability of incoming video in
            // two places. Firstly here - in case the participant object was created
            // with Status == AVAILABLE already - in which case we would never get
            // the OnChange event for that object. And secondly, we need to check it
            // in QSKVideo::OnChange callback - in case remote vdeo gets started later.
            {
                dispatcher->log("Retrieving remote participant video object.");
                if (this->GetVideo(skype->remoteVideo))
                {
                    Video::STATUS remoteAvailability;
                    skype->remoteVideo->GetPropStatus(remoteAvailability);
                    SEStringList Dbg;
                    SEString remoteStatus;
                    Dbg = skype->remoteVideo->getPropDebug(Video::P_STATUS, remoteAvailability);
                    remoteStatus.Format("Remote video status: %s", (const char*)Dbg[2]);
                    dispatcher->log((const char*)remoteStatus);

                    if (remoteAvailability == Video::AVAILABLE)
                    {
                        dispatcher->log("Opening video window (part.onchange).");
                        dispatcher->SendToggleVideoWindowSignal(true);
                    };
                }
                else
                {
                    dispatcher->log("ERROR: Failed to retrieve remote video object!");
                };
            };
        };
    };
};

//---------------------------------------------------------------------------------------
// Conversation class methods

void QSKConversation::PickUpCall()
{
    Q_ASSERT(skype->isLoggedIn);

    SEString localLoginName;

    skype->account->GetPropSkypename(localLoginName);
    QString PartList = "";

    this->GetParticipants(this->LiveParticipants, Conversation::ALL);

    for (unsigned I = 0; I < LiveParticipants.size(); I++)
    {
        SEString participantSkypeName;
        LiveParticipants[I]->GetPropIdentity(participantSkypeName);
        if (participantSkypeName !=  localLoginName)
        {
            PartList.append(participantSkypeName + " ");
        };
    };

    if (!skype->isLiveSessionUp)
    {
        QString Msg = "Incoming call from: ";
        Msg.append(PartList);
        dispatcher->log(Msg);
        this->JoinLiveSession();
    }
    else
    {
        QString Msg = "Another call is coming in from: ";
        Msg.append(PartList);
        dispatcher->log(Msg);
        dispatcher->log("As we already have a live session up, we will reject it.");
        this->LeaveLiveSession(true);
    };
};

void QSKConversation::OnChange(int prop)
{    
    if (prop == Conversation::P_LOCAL_LIVESTATUS)
    {
        Conversation::LOCAL_LIVESTATUS LiveStatus;
        this->GetPropLocalLivestatus(LiveStatus);

        if (LiveStatus == Conversation::RINGING_FOR_ME)
        {
            dispatcher->log("Picking up incoming call..");
            this->PickUpCall();
        };

        if (LiveStatus == Conversation::IM_LIVE)
        {
            // Setting LiveSession to Ref of this conversation
            skype->liveSession = this->ref();
            skype->isLiveSessionUp = true;
            dispatcher->SendEnableCallBtnSignal(true);
            dispatcher->SendToggleCallBtnDropsCallSignal(true);
            dispatcher->log("Live session is up.");
        };

        // Keeping LiveSession (ref to this conversation) alive still, to make sure
        // we will keep getting events for this Conversation. It gets de-referenced
        // in MySkype::OnConversationListChange, when livestatus goes to NONE.
        if ((LiveStatus == Conversation::NONE) || (LiveStatus == Conversation::RECENTLY_LIVE))
        {
            skype->isLiveSessionUp = false;
            dispatcher->SendToggleCallBtnDropsCallSignal(false);
            dispatcher->log("Call has ended.");
        };
    };
};



//------------------------------------------------------------------------------------------------
// Skype methods


void QSKSkype::OnConversationListChange(
        const ConversationRef &conversation,
        const Conversation::LIST_TYPE &type,
        const bool &added)
{
    SEString DisplayName;
    Conversation::LOCAL_LIVESTATUS LiveStatus;
    conversation->GetPropDisplayname(DisplayName);
    conversation->GetPropLocalLivestatus(LiveStatus);

    dispatcher->log("ConversationListChange fired.");

    if (type == Conversation::LIVE_CONVERSATIONS)
    {
        if (LiveStatus == Conversation::RINGING_FOR_ME)
        {
            if (!isLiveSessionUp)
            {                
                dispatcher->log("Incoming call, picking it up!");
                DRef<QSKConversation, Conversation>(conversation)->PickUpCall();
            }
            else
            {
                dispatcher->log("Another call is coming in.");
                dispatcher->log("As we already have a live session up, we will reject it.");
                conversation->LeaveLiveSession(true);
            };
        };

        if (LiveStatus == Conversation::IM_LIVE)
        {
            dispatcher->SendToggleCallBtnDropsCallSignal(true);
            dispatcher->log("Live session is up.");
            isLiveSessionUp = true;
        };

        if (LiveStatus == Conversation::NONE)
        {
            liveSession = NULL;
            dispatcher->log("Conversation removed from live conversation list.");
        };
    };
};


void QSKSkype::PlaceCall(QString target)
{
    Q_ASSERT(skype->isLoggedIn);
    Q_ASSERT(!skype->isLiveSessionUp);

    SEString Target = (const char*)target.toAscii();

    QSKConversation::Ref Call;
    SEStringList CallTargets;

    CallTargets.append(Target);
    skype->GetConversationByParticipants(CallTargets, Call, true, true);

    ParticipantRefs CallParticipantList;
    Call->GetParticipants(CallParticipantList, Conversation::ALL);

    SEString ParticipantIdentity;
    for (unsigned I = 0; I < CallParticipantList.size(); I++)
    {
        CallParticipantList[I]->GetPropIdentity(ParticipantIdentity);
        if (ParticipantIdentity == Target)
        {
            QString Msg = "Calling ";
            Msg.append(ParticipantIdentity);
            dispatcher->log(Msg);
            dispatcher->SendEnableCallBtnSignal(false);
            CallParticipantList[I]->Ring(Target, false, 0, 10, false);
            break;
        };
    };
};
