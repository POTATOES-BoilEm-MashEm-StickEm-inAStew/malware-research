#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "QSKClasses.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::changeEvent(QEvent *e)
{
    QMainWindow::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
};

void MainWindow::log (QString S)
{
    this->ui->eventLog->append(S);
};

void MainWindow::on_LogMessage (QString S)
{
    this->log(S);
};

void MainWindow::on_EnableLoginBtn (bool B)
{
    ui->loginButton->setEnabled(B);
};

void MainWindow::on_EnableCallBtn (bool B)
{
    ui->callButton->setEnabled(B);
};

void MainWindow::on_CallButtonDropsCall (bool B)
{
    if (B)
    {
        ui->callButton->setText("Drop Call");
    }
    else
    {
        ui->callButton->setText("Call");
    };
};


void MainWindow::on_loginButton_clicked()
{
    ui->loginButton->setEnabled(false);
    SEString accountName;
    accountName = ui->loginEdit->text().toAscii();
    SEString password;
    password = ui->passwordEdit->text().toAscii();

    if (skype->GetAccount(accountName, skype->account))
    {
        this->log("Logging in..");
        skype->account->LoginWithPassword(password, false, false);
    }
    else
    {
        this->log("ERROR: Account does not exist!");
    };
};


    void MainWindow::on_ToggleVideoWindow(bool B)
    {

        if (B)
        {
            this->log("Toggling video window ON");
            remoteVideoWindow.show();

            // skype->remoteVideo->SetScreen((uint)remoteVideoWindow.getKey());
            skype->remoteVideo->Start();
            remoteVideoWindow.renderStart();
        }
        else
        {
            remoteVideoWindow.renderStop();
            remoteVideoWindow.hide();
        };
    };

void MainWindow::on_UpdateContactList ()
{
    this->log("Updating contatct list.");
    this->ui->contactList->clear();    

    //ContactGroupRef BuddiesGroup;
    skype->GetHardwiredContactGroup(ContactGroup::ALL_BUDDIES, skype->allBuddiesGroup);
    skype->allBuddiesGroup->GetContacts(skype->allBuddies);

    int contactCount = skype->allBuddies.size();
    for (int I = 0; I < contactCount; I++)
    {
        SEString contactName;
        Contact::TYPE contactType;

        skype->allBuddies[I]->GetPropType(contactType);
        if (contactType == Contact::SKYPE)
        {
            skype->allBuddies[I]->GetPropSkypename(contactName);
        }
        else
        {
            skype->allBuddies[I]->GetPropPstnnumber(contactName);
        };

        QString QS = (const char*)contactName;
        QListWidgetItem * contact;
        contact = new(QListWidgetItem);
        contact->setText(QS);
        this->ui->contactList->addItem(contact);
    };
};


void MainWindow::on_contactList_doubleClicked(QModelIndex index)
{
    if (skype->isLiveSessionUp)
    {
        this->log("There is a call up already.");
    }
    else
    {
        if (this->ui->contactList->count() == 0)
        {
            this->log("You got no contacts.");
        }
        else
        {
            dispatcher->SendEnableCallBtnSignal(false);
            QString CallTarget = this->ui->contactList->currentItem()->text();
            this->log("Calling " + CallTarget);
            this->SendPlaceCallSignal(CallTarget);
        }
    };
};

void MainWindow::on_callButton_clicked()
{
    if (!skype->isLiveSessionUp)
    {
        if (this->ui->contactList->count() == 0)
        {
            this->log("You got no contacts.");
        }
        else
        {
            dispatcher->SendEnableCallBtnSignal(false);
            QString CallTarget = this->ui->contactList->currentItem()->text();
            this->SendPlaceCallSignal(CallTarget);
        };
    }
    else
    {
        Q_ASSERT(skype->liveSession);
        this->log("Dropping current call.");
        skype->liveSession->LeaveLiveSession(false);
    };
};

void MainWindow::on_previewButton_clicked()
{
    SEStringList deviceNames;
    SEStringList deviceIds;
    uint deviceCount;
    skype->GetAvailableVideoDevices(deviceNames, deviceIds, deviceCount);

    // For sake of simplicity, we assume the correct video device is at the 0-th index
    // in deviceNames and deviceIds lists we got back from GetAvailableVideoDevices
    if (skype->GetPreviewVideo(Video::MEDIA_VIDEO, skype->previewVideo, deviceNames[0], deviceIds[0]))
    {
            QString QS = "";
            QS.append(deviceNames[0]);
            dispatcher->log(QS);

            previewVideoWindow.show();

            //skype->previewVideo->SetScreen((uint)previewVideoWindow.getKey());
            skype->previewVideo->Start();
            previewVideoWindow.renderStart();
    }
    else
    {
        dispatcher->log("Skype::GetLocalVideo has failed.");
    };
};
